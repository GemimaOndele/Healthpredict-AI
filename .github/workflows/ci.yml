name: CI - HealthPredict AI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    env:
      # ‚öôÔ∏è CI l√©g√®re et fiable
      HP_AUTO_DOWNLOAD: "1"
      HP_DOWNLOAD_CAMEMBERT: "0"   # on √©vite les gros poids en CI
      HP_USE_CAMEMBERT: "0"
      HP_DB: "${{ github.workspace }}/data/app_ci.db"
      HP_MAX_ROWS_UI: "5000"
      HF_HUB_DISABLE_SYMLINKS_WARNING: "1"
      # Aligne la cl√© API avec les tests (tests/test_api.py envoie "test-key")
      HP_API_KEY: "test-key"
      # (optionnel) si tu utilises un repo priv√© HF :
      HF_TOKEN: ${{ secrets.HF_TOKEN }}

    steps:
      - name: üì• Checkout
        uses: actions/checkout@v4

      - name: üêç Python 3.11
        id: setup-python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: ‚ôªÔ∏è Cache pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: pip-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('requirements.txt') }}
          restore-keys: |
            pip-${{ runner.os }}-

      - name: üì¶ Install deps
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          # au cas o√π :
          pip install pytest fastapi uvicorn

      - name: ‚¨áÔ∏è Download assets (l√©gers)
        run: python scripts/download_assets.py

      - name: ‚úÖ Unit tests
        run: pytest -q

      - name: üö¶ Smoke test FastAPI
        if: ${{ hashFiles('api/main.py') != '' }}
        run: |
          python -c "import pathlib; pathlib.Path('data').mkdir(exist_ok=True)"
          uvicorn api.main:app --host 127.0.0.1 --port 8000 &
          sleep 2
          # Health
          curl -s http://127.0.0.1:8000/health | tee /tmp/health.json
          # Predict (TF-IDF)
          curl -s -X POST "http://127.0.0.1:8000/predict_text" \
               -H "Content-Type: application/json" \
               -H "X-API-Key: test-key" \
               -d '{"text":"scanner defectueux erreur systeme","model":"tfidf","return_keywords":true}' \
               | tee /tmp/api_out.json
          python - <<'PY'
import json, sys
h = json.load(open("/tmp/health.json"))
d = json.load(open("/tmp/api_out.json"))
assert h.get("status") == "ok"
assert isinstance(d, dict) and "label" in d and "proba" in d and d.get("model") in ("tfidf","camembert")
print("‚úÖ Smoke OK:", d.get("label"), d.get("proba"))
PY

  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: "3.11"
      - name: Install linters
        run: pip install ruff mypy
      - name: Ruff (lint)
        run: ruff check .
      - name: Mypy (typing light)
        run: mypy --ignore-missing-imports api app scripts hpdb.py || true
        # `|| true` pour ne pas bloquer la CI si mypy est verbeux; l'enl√®ver si je veux "fail fast".
